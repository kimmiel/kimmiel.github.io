{"ast":null,"code":"var _jsxFileName = \"/Users/kimmie/Documents/year3Web/mernStack/frontend/src/components/WorkoutDetails.js\",\n  _s = $RefreshSig$();\nimport { useWorkoutsContext } from \"../hooks/useWorkoutsContext.js\";\n\n//ch9 WorkoutDetails 把资料都顯示到網頁\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkoutDetails = _ref => {\n  _s();\n  let {\n    workout\n  } = _ref;\n  //ch 12 dele function\n  const {\n    dispatch\n  } = useWorkoutsContext();\n  //要傳東西到後端時要用async,在async的function内一定要用await ,await在得到後端的资料(eg json) 時用\n  const handleClick = async () => {\n    //fetch=發送請求 终點是/api/workouts/或有該id 行動是 method:'DELETE'\n    const response = await fetch(\"/api/workouts/\" + workout._id, {\n      method: \"DELETE\"\n    });\n    const json = await response.json(); //記下回應的文字\n\n    if (response.ok) {\n      //get context while action is delete ,payload is json\n      dispatch({\n        type: \"DELETE_WORKOUT\",\n        payload: json\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: workout.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Load(kg):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), workout.load]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Reps:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), workout.reps]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: workout.createdAt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"material-symbols-outlined\",\n      onClick: handleClick,\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkoutDetails, \"Crr10vDSttV9ehhrBlG/ahlU1oI=\", false, function () {\n  return [useWorkoutsContext];\n});\n_c = WorkoutDetails;\nexport default WorkoutDetails;\n\n// 可以看到async函數return的是一個Promise Object，如果在async function中return一個直接的變數，async會通過Promise.resolve()將它封裝成Promise，若在沒有await的情況下執行async函數會\"立即\"執行返回一個Promise Object。\n\n// await ?\n// 一般來說await是在等待一個async函數的完成，因為async函數return一個Promise Object，所以await可以用於等待一個async的return值。注意!!await不僅用於等Promise Object它也可以接普通函數或是直接的變數。\n//1:06\nvar _c;\n$RefreshReg$(_c, \"WorkoutDetails\");","map":{"version":3,"names":["useWorkoutsContext","WorkoutDetails","workout","dispatch","handleClick","response","fetch","_id","method","json","ok","type","payload","title","load","reps","createdAt"],"sources":["/Users/kimmie/Documents/year3Web/mernStack/frontend/src/components/WorkoutDetails.js"],"sourcesContent":["import { useWorkoutsContext } from \"../hooks/useWorkoutsContext.js\";\n\n//ch9 WorkoutDetails 把资料都顯示到網頁\nconst WorkoutDetails = ({ workout }) => {\n  //ch 12 dele function\n  const { dispatch } = useWorkoutsContext();\n  //要傳東西到後端時要用async,在async的function内一定要用await ,await在得到後端的资料(eg json) 時用\n  const handleClick = async () => {\n    //fetch=發送請求 终點是/api/workouts/或有該id 行動是 method:'DELETE'\n    const response = await fetch(\"/api/workouts/\" + workout._id, {\n      method: \"DELETE\",\n    });\n\n    const json = await response.json(); //記下回應的文字\n\n    if (response.ok) {\n        //get context while action is delete ,payload is json\n      dispatch({ type: \"DELETE_WORKOUT\", payload: json });\n    }\n  };\n  return (\n    <div className=\"workout-details\">\n      <h4>{workout.title}</h4>\n      <p>\n        <strong>Load(kg):</strong>\n        {workout.load}\n      </p>\n      <p>\n        <strong>Reps:</strong>\n        {workout.reps}\n      </p>\n      <p>{workout.createdAt}</p>\n      {/* ch14 是來自google icon libriy material-symbols-outlined  */}\n      <span className=\"material-symbols-outlined\" onClick={handleClick}>delete</span>\n      {/* onClick 按下之後會執行handleClickfunction   //ch 12 dele function*/}\n    </div>\n  );\n};\n\nexport default WorkoutDetails;\n\n// 可以看到async函數return的是一個Promise Object，如果在async function中return一個直接的變數，async會通過Promise.resolve()將它封裝成Promise，若在沒有await的情況下執行async函數會\"立即\"執行返回一個Promise Object。\n\n// await ?\n// 一般來說await是在等待一個async函數的完成，因為async函數return一個Promise Object，所以await可以用於等待一個async的return值。注意!!await不僅用於等Promise Object它也可以接普通函數或是直接的變數。\n//1:06"],"mappings":";;AAAA,SAASA,kBAAkB,QAAQ,gCAAgC;;AAEnE;AAAA;AACA,MAAMC,cAAc,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EACjC;EACA,MAAM;IAAEC;EAAS,CAAC,GAAGH,kBAAkB,EAAE;EACzC;EACA,MAAMI,WAAW,GAAG,YAAY;IAC9B;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,GAAGJ,OAAO,CAACK,GAAG,EAAE;MAC3DC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,EAAE,CAAC,CAAC;;IAEpC,IAAIJ,QAAQ,CAACK,EAAE,EAAE;MACb;MACFP,QAAQ,CAAC;QAAEQ,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEH;MAAK,CAAC,CAAC;IACrD;EACF,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,iBAAiB;IAAA,wBAC9B;MAAA,UAAKP,OAAO,CAACW;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eACxB;MAAA,wBACE;QAAA,UAAQ;MAAS;QAAA;QAAA;QAAA;MAAA,QAAS,EACzBX,OAAO,CAACY,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACX,eACJ;MAAA,wBACE;QAAA,UAAQ;MAAK;QAAA;QAAA;QAAA;MAAA,QAAS,EACrBZ,OAAO,CAACa,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACX,eACJ;MAAA,UAAIb,OAAO,CAACc;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAE1B;MAAM,SAAS,EAAC,2BAA2B;MAAC,OAAO,EAAEZ,WAAY;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QAE3E;AAEV,CAAC;AAAC,GAlCIH,cAAc;EAAA,QAEGD,kBAAkB;AAAA;AAAA,KAFnCC,cAAc;AAoCpB,eAAeA,cAAc;;AAE7B;;AAEA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}