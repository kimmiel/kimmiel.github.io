{"ast":null,"code":"var _jsxFileName = \"/Users/kimmie/Documents/year3Web/project/frontend/src/components/WorkoutDetails.js\",\n  _s = $RefreshSig$();\nimport { useWorkoutsContext } from \"../hooks/useWorkoutsContext.js\";\nimport { useAuthContext } from \"../hooks/useAuthContext\"; //ch n15\n\n//data fns ch 14日期排版\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\n\n//ch9 WorkoutDetails 把资料都顯示到網頁\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkoutDetails = _ref => {\n  _s();\n  let {\n    workout\n  } = _ref;\n  //ch 12 dele function\n  const {\n    dispatch\n  } = useWorkoutsContext();\n  const {\n    user\n  } = useAuthContext(); //ch n15\n\n  //要傳東西到後端時要用async,在async的function内一定要用await ,await在得到後端的资料(eg json) 時用\n  const handleClick = async () => {\n    //ch n15 如果没有login\n    if (!user) {\n      return;\n    }\n\n    //fetch=發送請求 终點是/api/workouts/或有該id 行動是 method:'DELETE'\n    const response = await fetch(\"/api/workouts/\" + workout._id, {\n      method: \"DELETE\",\n      //ch n15傳授权 下面是signature\n      headers: {\n        'Authorization': `Bearer ${user.token}`\n      }\n    });\n    const json = await response.json(); //記下回應的文字\n\n    if (response.ok) {\n      //get context while action is delete ,payload is json\n      dispatch({\n        type: \"DELETE_WORKOUT\",\n        payload: json\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"workout-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: workout.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Load(kg):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), workout.load]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Reps:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), workout.reps]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: formatDistanceToNow(new Date(workout.createdAt), {\n        addSuffix: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"material-symbols-outlined\",\n      onClick: handleClick,\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkoutDetails, \"K/J1musKr05vVYSfxIaNO6KMapE=\", false, function () {\n  return [useWorkoutsContext, useAuthContext];\n});\n_c = WorkoutDetails;\nexport default WorkoutDetails;\n\n// 可以看到async函數return的是一個Promise Object，如果在async function中return一個直接的變數，async會通過Promise.resolve()將它封裝成Promise，若在沒有await的情況下執行async函數會\"立即\"執行返回一個Promise Object。\n\n// await ?\n// 一般來說await是在等待一個async函數的完成，因為async函數return一個Promise Object，所以await可以用於等待一個async的return值。注意!!await不僅用於等Promise Object它也可以接普通函數或是直接的變數。\n//日期排版\nvar _c;\n$RefreshReg$(_c, \"WorkoutDetails\");","map":{"version":3,"names":["useWorkoutsContext","useAuthContext","formatDistanceToNow","WorkoutDetails","workout","dispatch","user","handleClick","response","fetch","_id","method","headers","token","json","ok","type","payload","title","load","reps","Date","createdAt","addSuffix"],"sources":["/Users/kimmie/Documents/year3Web/project/frontend/src/components/WorkoutDetails.js"],"sourcesContent":["import { useWorkoutsContext } from \"../hooks/useWorkoutsContext.js\";\nimport { useAuthContext } from \"../hooks/useAuthContext\"; //ch n15\n\n//data fns ch 14日期排版\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\n\n//ch9 WorkoutDetails 把资料都顯示到網頁\nconst WorkoutDetails = ({ workout }) => {\n  //ch 12 dele function\n  const { dispatch } = useWorkoutsContext();\n  const { user } = useAuthContext(); //ch n15\n\n  //要傳東西到後端時要用async,在async的function内一定要用await ,await在得到後端的资料(eg json) 時用\n  const handleClick = async () => {\n    //ch n15 如果没有login\n    if (!user) {\n      return;\n    }\n\n    //fetch=發送請求 终點是/api/workouts/或有該id 行動是 method:'DELETE'\n    const response = await fetch(\"/api/workouts/\" + workout._id, {\n      method: \"DELETE\",\n      //ch n15傳授权 下面是signature\n      headers: {\n        'Authorization': `Bearer ${user.token}`,\n      }\n    });\n\n    const json = await response.json(); //記下回應的文字\n\n    if (response.ok) {\n      //get context while action is delete ,payload is json\n      dispatch({ type: \"DELETE_WORKOUT\", payload: json });\n    }\n  };\n  return (\n    <div className=\"workout-details\">\n      <h4>{workout.title}</h4>\n      <p>\n        <strong>Load(kg):</strong>\n        {workout.load}\n      </p>\n      <p>\n        <strong>Reps:</strong>\n        {workout.reps}\n      </p>\n      {/* 用date-fns去排版以下日期 addSuffix後缀 eg xxday ago */}\n      <p>\n        {formatDistanceToNow(new Date(workout.createdAt), { addSuffix: true })}\n      </p>\n      {/* ch14 material-symbols-outlined 是來自google icon libriy ,delete 也是來自libriy 的修件 */}\n      <span className=\"material-symbols-outlined\" onClick={handleClick}>\n        delete\n      </span>\n      {/* onClick 按下之後會執行handleClickfunction   //ch 12 dele function*/}\n    </div>\n  );\n};\n\nexport default WorkoutDetails;\n\n// 可以看到async函數return的是一個Promise Object，如果在async function中return一個直接的變數，async會通過Promise.resolve()將它封裝成Promise，若在沒有await的情況下執行async函數會\"立即\"執行返回一個Promise Object。\n\n// await ?\n// 一般來說await是在等待一個async函數的完成，因為async函數return一個Promise Object，所以await可以用於等待一個async的return值。注意!!await不僅用於等Promise Object它也可以接普通函數或是直接的變數。\n//日期排版\n"],"mappings":";;AAAA,SAASA,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,cAAc,QAAQ,yBAAyB,CAAC,CAAC;;AAE1D;AACA,OAAOC,mBAAmB,MAAM,8BAA8B;;AAE9D;AAAA;AACA,MAAMC,cAAc,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EACjC;EACA,MAAM;IAAEC;EAAS,CAAC,GAAGL,kBAAkB,EAAE;EACzC,MAAM;IAAEM;EAAK,CAAC,GAAGL,cAAc,EAAE,CAAC,CAAC;;EAEnC;EACA,MAAMM,WAAW,GAAG,YAAY;IAC9B;IACA,IAAI,CAACD,IAAI,EAAE;MACT;IACF;;IAEA;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,GAAGL,OAAO,CAACM,GAAG,EAAE;MAC3DC,MAAM,EAAE,QAAQ;MAChB;MACAC,OAAO,EAAE;QACP,eAAe,EAAG,UAASN,IAAI,CAACO,KAAM;MACxC;IACF,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAI,EAAE,CAAC,CAAC;;IAEpC,IAAIN,QAAQ,CAACO,EAAE,EAAE;MACf;MACAV,QAAQ,CAAC;QAAEW,IAAI,EAAE,gBAAgB;QAAEC,OAAO,EAAEH;MAAK,CAAC,CAAC;IACrD;EACF,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,iBAAiB;IAAA,wBAC9B;MAAA,UAAKV,OAAO,CAACc;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eACxB;MAAA,wBACE;QAAA,UAAQ;MAAS;QAAA;QAAA;QAAA;MAAA,QAAS,EACzBd,OAAO,CAACe,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACX,eACJ;MAAA,wBACE;QAAA,UAAQ;MAAK;QAAA;QAAA;QAAA;MAAA,QAAS,EACrBf,OAAO,CAACgB,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACX,eAEJ;MAAA,UACGlB,mBAAmB,CAAC,IAAImB,IAAI,CAACjB,OAAO,CAACkB,SAAS,CAAC,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACpE,eAEJ;MAAM,SAAS,EAAC,2BAA2B;MAAC,OAAO,EAAEhB,WAAY;MAAA,UAAC;IAElE;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QAEH;AAEV,CAAC;AAAC,GAlDIJ,cAAc;EAAA,QAEGH,kBAAkB,EACtBC,cAAc;AAAA;AAAA,KAH3BE,cAAc;AAoDpB,eAAeA,cAAc;;AAE7B;;AAEA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}